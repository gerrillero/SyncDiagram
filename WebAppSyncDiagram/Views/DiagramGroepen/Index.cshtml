@model IEnumerable<WebAppSyncDiagram.ModelViews.DiagramNodeViewModel>

@{
    ViewBag.Title = "Diagram Organisatie";
}

<button onclick="collapseExpanded()">Expand / Collapse</button>

<div class="content-container-fluid">
    <div class="row">
        <div class="cols-sample-area">
            <div id="diagramGroepen"></div>
        </div>
    </div>
</div>

@section scripts {
    <script>

        var data2 = ej.parseJSON(@Html.Raw(Json.Encode(Model)));
        
        console.log(data2);

        function nodeTemplate(diagram, node) {
            node.labels[0].text = node.Naam;
            node.fillColor = node.Kleur;
            node.cssClass = node.Kleur;
        }

        function getLayoutInfo(diagram, node, options) {
            if (node.labels[0].text == "General Manager") {
                options.assistants.push(options.children[0]);
                options.children.splice(0, 1);
            }
            if (!options.hasSubTree) {
                if (node.ChartType) {
                    options.type = node.ChartType
                }

                options.offset = -58;
            }
        }

        if (!(ej.browserInfo().name === "msie" && Number(ej.browserInfo().version) < 9)) {
            $("#diagramGroepen").ejDiagram({
                width: "100%", height: "800px",
                //use automatic layout to arranging elements on the page
                layout: {
                    type: "organizationalchart", horizontalSpacing: 80, verticalSpacing: 50, marginY: 30,
                    getLayoutInfo: getLayoutInfo
                },
                defaultSettings: {
                    //set the default properties of the nodes.
                    node: {
                        width: 150, height: 50, shape: "rectangle", borderColor: "transparent",
                        labels: [{ name: "label1", fontColor: "#ffffff", fontSize: 12, margin: { left: 5, right: 5 } }]
                    },
                    //set the default properties of the connectors.
                    connector: { segments: [{ "type": "orthogonal" }], targetDecorator: { shape: "none" } }
                },
                //initialize the node template.
                nodeTemplate: nodeTemplate,
                tool: ej.datavisualization.Diagram.Tool.None,
                pageSettings: { scrollLimit: "diagram" },
                snapSettings: { snapConstraints: ej.datavisualization.Diagram.SnapConstraints.None },
                enableContextMenu: false,
                //configure data source for diagram
                dataSourceSettings: {
                    id: "Id", parent: "IdParent",
                    //specifies the dataSource
                    dataSource: data2
                },
                //Defines double click event
                doubleClick: removeNode, //onDoubleClick,
                //itemClick: removeNode
            });
            diagramFitToPage("diagramGroepen");
        }
        else {
            alert("Diagram will not be supported in IE Version < 9");
        }


        function collapseExpanded() {
            var diagram = $("#diagramGroepen").ejDiagram("instance");
            $.each(diagram._nodes, function (index, node) {
                if (node.cssClass === "orange") {
                    if (node.IdParent !== "") {
                        debugger;
                        diagram.updateNode(node.name, { isExpanded: !node.isExpanded });
                    }
                }
            });
        }

        function removeNode(args) {
            var diagram = $("#diagramGroepen").ejDiagram("instance");
            var node = args.element;
            debugger;
            diagram.remove(node);
            //diagram.refresh();
            diagram.layout();
        }

        function onDoubleClick(args) {
            var diagram = $("#diagramGroepen").ejDiagram("instance");
            var node = args.element;
            debugger;

            // Sets the double clicked node as fixed node
            $("#diagramGroepen").ejDiagram({ layout: { fixedNode: node.name } });
            
            //Expands/collapses the children of node
            diagram.updateNode(node.name, { isExpanded: !node.isExpanded });
        }

    </script>
}